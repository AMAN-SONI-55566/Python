Naming rules and conventions
When assigning names to objects, programmers adhere to a set of rules and conventions which help 
to standardize code and make it more accessible to everyone. Here are some naming rules and conventions
that you should know:

1.Names cannot contain spaces.
2.Names may be a mixture of upper and lower case characters.
3.Names can’t start with a number but may contain numbers after the first character.
4.Variable names and function names should be written in snake_case, which means that all letters are 
  lowercase and words are separated using an underscore. 
5.Descriptive names are better than cryptic abbreviations because they help other programmers (and you)
  read and interpret your code. For example, student_name is better than sn. It may feel excessive when
  you write it, but when you return to your code you’ll find it much easier to understand.


---------------------------------------------------------------------------------------------------------


Tim Peters, a Python programmer, wrote this now-famous “poem” of guiding principles for coding in Python:


The Zen of Python
by Tim Peters 

---------------------------------------------------------------------------------------------------------

Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.

Readability counts.

Special cases aren't special enough to break the rules.

Although practicality beats purity.

Errors should never pass silently.

Unless explicitly silenced.

In the face of ambiguity, refuse the temptation to guess.

There should be one—and preferably only one—obvious way to do it.

Although that way may not be obvious at first unless you're Dutch.

Now is better than never.

Although never is often better than right now.

If the implementation is hard to explain, it's a bad idea.

If the implementation is easy to explain, it may be a good idea.

Namespaces are one honking great idea — let's do more of those!

---------------------------------------------------------------------------------------------------------

Key takeaways
1.Syntax and semantics are what give form and meaning to a language, including Python.  
2.A large part of learning a new language is familiarizing yourself with its syntax and semantics. 
3.Much of this comes through exposure and practice, but there are a few guiding principles and resources 
  that can help you along the way. 
4.If you learn the rules about naming objects and build a bank of resources that you can reference for guidance,
  you’ll surely make progress as a Python learner. 
5.As you get more familiar with Python, you’ll be able to communicate more efficiently with computers and do 
  more with your data analysis tools!